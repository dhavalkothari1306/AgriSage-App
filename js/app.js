/**
 * Main application script for Smart Fertilizer Recommendation System
 */

// DOM Elements
const cropTypeSelect = document.getElementById('cropType');
const soilTypeSelect = document.getElementById('soilType');
const regionSelect = document.getElementById('regionSelect');
const locationInput = document.getElementById('location');
const getWeatherBtn = document.getElementById('getWeatherBtn');
const fertilizerForm = document.getElementById('fertilizerForm');
const resetBtn = document.getElementById('resetBtn');
const tabBtns = document.querySelectorAll('.tab-btn');
const tabContents = document.querySelectorAll('.tab-content');
const cropInfoContent = document.getElementById('cropInfoContent');
const weatherInfoContent = document.getElementById('weatherInfoContent');
const recommendationContent = document.getElementById('recommendationContent');
const scheduleContent = document.getElementById('scheduleContent');
const costContent = document.getElementById('costContent');
const educationContent = document.getElementById('educationContent');
const yieldPredictionContent = document.getElementById('yieldPredictionContent');
const resultsSection = document.getElementById('resultsSection');
const languageSelect = document.getElementById('language');
const languageNotification = document.getElementById('languageNotification');
const languageNotificationText = document.getElementById('languageNotificationText');

// Event Listeners
cropTypeSelect.addEventListener('change', displayCropInfo);
getWeatherBtn.addEventListener('click', fetchWeather);
fertilizerForm.addEventListener('submit', handleFormSubmit);
resetBtn.addEventListener('click', resetForm);
languageSelect.addEventListener('change', changeLanguage);

// Add event listeners to tab buttons
tabBtns.forEach(btn => {
    btn.addEventListener('click', () => {
        // Remove active class from all buttons and contents
        tabBtns.forEach(b => b.classList.remove('active'));
        tabContents.forEach(c => c.classList.remove('active'));
        
        // Add active class to clicked button and corresponding content
        btn.classList.add('active');
        document.getElementById(btn.dataset.tab).classList.add('active');
    });
});

/**
 * Display crop information when crop type is selected
 */
function displayCropInfo() {
    const cropType = cropTypeSelect.value;
    if (!cropType) {
        cropInfoContent.innerHTML = `<p data-translate="selectCropFirst">Please select a crop first.</p>`;
        return;
    }
    
    const crop = cropData[cropType];
    if (!crop) return;
    
    const nutrientReq = crop.nutrientRequirements;
    
    let html = `
        <div class="crop-details">
            <h4 data-translate="nutrientRequirements">Nutrient Requirements</h4>
            <div class="nutrient-req">
                <div class="nutrient-item">
                    <div class="nutrient-name">N</div>
                    <div class="nutrient-value">${nutrientReq.n.min}-${nutrientReq.n.max} kg/ha</div>
                </div>
                <div class="nutrient-item">
                    <div class="nutrient-name">P</div>
                    <div class="nutrient-value">${nutrientReq.p.min}-${nutrientReq.p.max} kg/ha</div>
                </div>
                <div class="nutrient-item">
                    <div class="nutrient-name">K</div>
                    <div class="nutrient-value">${nutrientReq.k.min}-${nutrientReq.k.max} kg/ha</div>
                </div>
            </div>
            
            <h4 data-translate="growthStages">Growth Stages</h4>
            <ul>
    `;
    
    crop.growthStages.forEach(stage => {
        html += `<li><strong>${stage.name}</strong>: ${stage.description} (${stage.days})</li>`;
    });
    
    html += `</ul></div>`;
    
    cropInfoContent.innerHTML = html;
    translatePage();
}

/**
 * Fetch weather data for the specified location
 */
async function fetchWeather() {
    const location = locationInput.value.trim();
    if (!location) {
        alert(getTranslation('enterLocation'));
        return;
    }
    
    weatherInfoContent.innerHTML = `<p data-translate="fetchingWeather">Fetching weather data...</p>`;
    
    try {
        const weatherData = await weatherService.getCurrentWeather(location);
        if (!weatherData) {
            weatherInfoContent.innerHTML = `<p data-translate="weatherError">Error fetching weather data. Please try again.</p>`;
            return;
        }
        
        const weatherAnalysis = weatherService.analyzeWeatherForFertilizer(weatherData);
        
        // Update recommendation engine with weather analysis
        recommendationEngine.setWeatherAnalysis(weatherAnalysis);
        
        // Display weather information
        displayWeatherInfo(weatherData, weatherAnalysis);
    } catch (error) {
        console.error('Error:', error);
        weatherInfoContent.innerHTML = `<p data-translate="weatherError">Error fetching weather data. Please try again.</p>`;
    }
}

/**
 * Display weather information and analysis
 * @param {Object} weatherData - Weather data from API
 * @param {Object} analysis - Weather analysis for fertilizer application
 */
function displayWeatherInfo(weatherData, analysis) {
    const iconClass = getWeatherIconClass(weatherData.weather[0].main);
    const suitabilityClass = analysis.isSuitable ? 'suitable' : 'not-suitable';
    
    const html = `
        <div class="weather-display">
            <div class="weather-icon">
                <i class="${iconClass}"></i>
            </div>
            <div class="weather-details">
                <div class="weather-temp">${Math.round(weatherData.main.temp)}Â°C</div>
                <div class="weather-desc">${weatherData.weather[0].description}</div>
                <div>Humidity: ${weatherData.main.humidity}%</div>
                <div>Wind: ${weatherData.wind.speed} km/h</div>
            </div>
        </div>
        
        <div class="weather-suitability ${suitabilityClass}">
            ${analysis.summary}
        </div>
        
        <div class="weather-recommendations">
            <h4 data-translate="weatherRecommendations">Weather-based Recommendations:</h4>
            <ul>
                <li>${analysis.recommendations.temperature}</li>
                <li>${analysis.recommendations.humidity}</li>
                <li>${analysis.recommendations.rain}</li>
            </ul>
        </div>
    `;
    
    weatherInfoContent.innerHTML = html;
    translatePage();
}

/**
 * Get Font Awesome icon class based on weather condition
 * @param {string} weatherCondition - Weather condition
 * @returns {string} - Font Awesome icon class
 */
function getWeatherIconClass(weatherCondition) {
    switch (weatherCondition.toLowerCase()) {
        case 'clear':
            return 'fas fa-sun';
        case 'clouds':
            return 'fas fa-cloud';
        case 'rain':
            return 'fas fa-cloud-rain';
        case 'thunderstorm':
            return 'fas fa-bolt';
        case 'snow':
            return 'fas fa-snowflake';
        case 'mist':
        case 'fog':
            return 'fas fa-smog';
        default:
            return 'fas fa-cloud';
    }
}

/**
 * Handle form submission for fertilizer recommendation
 * @param {Event} event - Form submission event
 */
function handleFormSubmit(event) {
    event.preventDefault();
    
    // Get form values
    const cropType = cropTypeSelect.value;
    const soilType = soilTypeSelect.value;
    const region = document.getElementById('region').value;
    const soilPH = parseFloat(document.getElementById('soilPH').value);
    const nitrogenLevel = parseFloat(document.getElementById('nitrogenLevel').value);
    const phosphorusLevel = parseFloat(document.getElementById('phosphorusLevel').value);
    const potassiumLevel = parseFloat(document.getElementById('potassiumLevel').value);
    const organicMatter = parseFloat(document.getElementById('organicMatter').value) || 0;
    
    // Validate inputs
    if (!cropType || !soilType || !region || isNaN(soilPH) || isNaN(nitrogenLevel) || 
        isNaN(phosphorusLevel) || isNaN(potassiumLevel)) {
        alert(getTranslation('fillAllFields'));
        return;
    }
    
    // Set data in recommendation engine
    recommendationEngine.setCropType(cropType);
    recommendationEngine.setSoilData({
        type: soilType,
        ph: soilPH,
        n: nitrogenLevel,
        p: phosphorusLevel,
        k: potassiumLevel,
        organicMatter: organicMatter
    });
    recommendationEngine.setRegion(region);
    
    // Generate recommendation
    const recommendation = recommendationEngine.generateRecommendation();
    
    // Display results
    displayFertilizerRecommendation(recommendation.fertilizerPlan);
    displayYieldPrediction(recommendation.yieldPrediction);
    displayApplicationSchedule(recommendation.applicationSchedule);
    displayCostBreakdown(recommendation.costBreakdown);
    displayEducationalTips(recommendation.educationalTips);
    
    // Show results section
    resultsSection.style.display = 'block';
    
    // Scroll to results
    resultsSection.scrollIntoView({ behavior: 'smooth' });
}

/**
 * Display fertilizer recommendation
 * @param {Array} fertilizerPlan - Fertilizer plan
 */
function displayFertilizerRecommendation(fertilizerPlan) {
    if (!fertilizerPlan || fertilizerPlan.length === 0) {
        recommendationContent.innerHTML = `<p data-translate="noRecommendation">No recommendation available.</p>`;
        return;
    }
    
    let html = '';
    
    fertilizerPlan.forEach(fert => {
        html += `
            <div class="recommendation-item">
                <h4><i class="fas fa-flask"></i> ${fert.name}</h4>
                <p><strong data-translate="quantity">Quantity:</strong> ${Math.round(fert.quantity)} kg/ha</p>
                <p><strong data-translate="composition">Composition:</strong> ${fert.composition}</p>
                <p><strong data-translate="description">Description:</strong> ${fert.description}</p>
                <div class="nutrient-provided">
                    <span class="nutrient-tag">N: ${fert.nutrientProvided.n} kg/ha</span>
                    <span class="nutrient-tag">P: ${fert.nutrientProvided.p} kg/ha</span>
                    <span class="nutrient-tag">K: ${fert.nutrientProvided.k} kg/ha</span>
                </div>
            </div>
        `;
    });
    
    recommendationContent.innerHTML = html;
    translatePage();
}

/**
 * Display yield prediction
 * @param {Object} yieldPrediction - Yield prediction data
 */
function displayYieldPrediction(yieldPrediction) {
    if (!yieldPrediction) {
        yieldPredictionContent.innerHTML = `<p data-translate="noPrediction">No yield prediction available.</p>`;
        return;
    }
    
    const html = `
        <div class="yield-chart">
            <p data-translate="baseYield">Base Yield: ${yieldPrediction.baseYield}</p>
            <div class="improvement-percentage">+${yieldPrediction.predictedImprovement}%</div>
            <p data-translate="predictedImprovement">Predicted Improvement</p>
            
            <h4 data-translate="contributingFactors">Contributing Factors:</h4>
            <div class="factors-list">
                <div class="factor-item">
                    <span data-translate="soilHealth">Soil Health</span>
                    <span class="factor-value">+${yieldPrediction.factors.soilHealth}%</span>
                </div>
                <div class="factor-item">
                    <span data-translate="weatherConditions">Weather Conditions</span>
                    <span class="factor-value">+${yieldPrediction.factors.weather}%</span>
                </div>
                <div class="factor-item">
                    <span data-translate="fertilization">Fertilization</span>
                    <span class="factor-value">+${yieldPrediction.factors.fertilization}%</span>
                </div>
            </div>
        </div>
    `;
    
    yieldPredictionContent.innerHTML = html;
    translatePage();
}

/**
 * Display application schedule
 * @param {Array} schedule - Application schedule
 */
function displayApplicationSchedule(schedule) {
    if (!schedule || schedule.length === 0) {
        scheduleContent.innerHTML = `<p data-translate="noSchedule">No application schedule available.</p>`;
        return;
    }
    
    let html = '';
    
    schedule.forEach(stage => {
        let fertilizersHtml = '';
        
        stage.fertilizers.forEach(fert => {
            fertilizersHtml += `
                <div class="schedule-fertilizer-item">
                    <span>${fert.name}</span>
                    <span>${fert.quantity} kg/ha</span>
                    <span>${fert.method}</span>
                </div>
            `;
        });
        
        html += `
            <div class="schedule-stage">
                <h4>${stage.stageName}</h4>
                <p class="schedule-desc">${stage.stageDescription}</p>
                <div class="schedule-fertilizers">
                    <div class="schedule-fertilizer-item">
                        <strong data-translate="fertilizerName">Fertilizer</strong>
                        <strong data-translate="quantity">Quantity</strong>
                        <strong data-translate="applicationMethod">Method</strong>
                    </div>
                    ${fertilizersHtml}
                </div>
            </div>
        `;
    });
    
    scheduleContent.innerHTML = html;
    translatePage();
}

/**
 * Display cost breakdown
 * @param {Object} costBreakdown - Cost breakdown data
 */
function displayCostBreakdown(costBreakdown) {
    if (!costBreakdown || !costBreakdown.details || costBreakdown.details.length === 0) {
        costContent.innerHTML = `<p data-translate="noCost">No cost breakdown available.</p>`;
        return;
    }
    
    let tableRows = '';
    
    costBreakdown.details.forEach(item => {
        tableRows += `
            <tr>
                <td>${item.name}</td>
                <td>${Math.round(item.quantity)} kg/ha</td>
                <td>â¹${item.unitCost.toFixed(2)}/kg</td>
                <td>â¹${Math.round(item.totalCost)}</td>
            </tr>
        `;
    });
    
    const html = `
        <div class="cost-summary">
            <p data-translate="totalCostLabel">Total Fertilizer Cost:</p>
            <div class="total-cost">â¹${Math.round(costBreakdown.totalCost)}</div>
            <p data-translate="costPerHectare">Cost per hectare: â¹${Math.round(costBreakdown.costPerHectare)}</p>
        </div>
        
        <table class="cost-table">
            <thead>
                <tr>
                    <th data-translate="fertilizerName">Fertilizer</th>
                    <th data-translate="quantity">Quantity</th>
                    <th data-translate="unitCost">Unit Cost</th>
                    <th data-translate="totalCost">Total Cost</th>
                </tr>
            </thead>
            <tbody>
                ${tableRows}
            </tbody>
        </table>
    `;
    
    costContent.innerHTML = html;
    translatePage();
}

/**
 * Display educational tips
 * @param {Array} tips - Educational tips
 */
function displayEducationalTips(tips) {
    if (!tips || tips.length === 0) {
        educationContent.innerHTML = `<p data-translate="noTips">No educational tips available.</p>`;
        return;
    }
    
    let html = '';
    
    tips.forEach((tip, index) => {
        html += `
            <div class="tip-item">
                <h4><i class="fas fa-lightbulb"></i> Tip ${index + 1}</h4>
                <p>${tip}</p>
            </div>
        `;
    });
    
    educationContent.innerHTML = html;
    translatePage();
}

/**
 * Switch between tabs
 * @param {string} tabId - Tab ID to switch to
 */
function switchTab(tabId) {
    // Remove active class from all buttons and contents
    tabBtns.forEach(btn => btn.classList.remove('active'));
    tabContents.forEach(content => content.classList.remove('active'));
    
    // Add active class to selected tab and content
    const selectedBtn = document.querySelector(`.tab-btn[data-tab="${tabId}"]`);
    if (selectedBtn) selectedBtn.classList.add('active');
    
    const selectedContent = document.getElementById(tabId);
    if (selectedContent) selectedContent.classList.add('active');
}

/**
 * Reset the form
 */
function resetForm() {
    fertilizerForm.reset();
    cropInfoContent.innerHTML = '';
    weatherInfoContent.innerHTML = `<p data-translate="fetchWeather">Please fetch weather data first.</p>`;
    recommendationContent.innerHTML = '';
    scheduleContent.innerHTML = '';
    costContent.innerHTML = '';
    educationContent.innerHTML = '';
    yieldPredictionContent.innerHTML = '';
    resultsSection.style.display = 'none';
    
    // Reset recommendation engine
    recommendationEngine.setCropType(null);
    recommendationEngine.setSoilData(null);
    recommendationEngine.setWeatherAnalysis(null);
    recommendationEngine.setRegion(null);
    
    translatePage();
}

/**
 * Initialize tooltips
 */
function initTooltips() {
    // This is a placeholder for tooltip initialization
    // You can implement a tooltip library here if needed
}

/**
 * Change the language of the application
 */
function changeLanguage() {
    const selectedLanguage = languageSelect.value;
    localStorage.setItem('preferredLanguage', selectedLanguage);
    
    // Show notification
    let languageName = '';
    switch (selectedLanguage) {
        case 'en':
            languageName = 'English';
            break;
        case 'hi':
            languageName = 'à¤¹à¤¿à¤à¤¦à¥ (Hindi)';
            break;
        case 'kn':
            languageName = 'à²à²¨à³à²¨à²¡ (Kannada)';
            break;
        case 'te':
            languageName = 'à°¤à±à°²à±à°à± (Telugu)';
            break;
        case 'ta':
            languageName = 'à®¤à®®à®¿à®´à¯ (Tamil)';
            break;
    }
    
    languageNotificationText.textContent = `Language changed to ${languageName}`;
    languageNotification.style.animation = 'none';
    setTimeout(() => {
        languageNotification.style.animation = 'fadeInOut 3s ease-in-out';
    }, 10);
    
    translatePage();
}

/**
 * Translate the page to the selected language
 */
function translatePage() {
    const selectedLanguage = languageSelect.value;
    const elements = document.querySelectorAll('[data-translate]');
    
    elements.forEach(element => {
        const key = element.getAttribute('data-translate');
        if (translations[selectedLanguage] && translations[selectedLanguage][key]) {
            if (element.tagName === 'INPUT' && element.type === 'placeholder') {
                element.placeholder = translations[selectedLanguage][key];
            } else {
                element.textContent = translations[selectedLanguage][key];
            }
        }
    });
}

/**
 * Get translation for a key
 * @param {string} key - Translation key
 * @returns {string} - Translated text
 */
function getTranslation(key) {
    const selectedLanguage = languageSelect.value;
    if (translations[selectedLanguage] && translations[selectedLanguage][key]) {
        return translations[selectedLanguage][key];
    }
    return translations['en'][key] || key;
}

// Translations for the application
const translations = {
    'en': {
        'title': 'Smart Fertilizer Recommendation System',
        'selectLanguage': 'Select Language:',
        'inputDetails': 'Input Details',
        'cropType': 'Crop Type:',
        'selectCrop': 'Select Crop',
        'soilType': 'Soil Type:',
        'selectSoil': 'Select Soil Type',
        'region': 'Region:',
        'selectRegion': 'Select Region',
        'location': 'Location (for weather):',
        'getWeather': 'Get Weather',
        'soilTestResults': 'Soil Test Results',
        'soilPH': 'Soil pH:',
        'nitrogenLevel': 'Nitrogen Level (kg/ha):',
        'phosphorusLevel': 'Phosphorus Level (kg/ha):',
        'potassiumLevel': 'Potassium Level (kg/ha):',
        'organicMatter': 'Organic Matter (%):',
        'getRecommendation': 'Get Fertilizer Recommendation',
        'resetForm': 'Reset Form',
        'recommendation': 'Recommendation',
        'schedule': 'Application Schedule',
        'cost': 'Cost Analysis',
        'education': 'Education',
        'cropInformation': 'Crop Information',
        'weatherConditions': 'Weather Conditions',
        'fertilizerRecommendation': 'Fertilizer Recommendation',
        'yieldPrediction': 'Yield Prediction',
        'applicationSchedule': 'Application Schedule',
        'costBreakdown': 'Cost Breakdown',
        'educationalTips': 'Educational Tips',
        'footer': 'Â© 2023 Smart Fertilizer Recommendation System | Developed for sustainable agriculture',
        'selectCropFirst': 'Please select a crop first.',
        'enterLocation': 'Please enter a location.',
        'fetchingWeather': 'Fetching weather data...',
        'weatherError': 'Error fetching weather data. Please try again.',
        'weatherRecommendations': 'Weather-based Recommendations:',
        'fillAllFields': 'Please fill all required fields.',
        'noRecommendation': 'No recommendation available.',
        'quantity': 'Quantity:',
        'composition': 'Composition:',
        'description': 'Description:',
        'noPrediction': 'No yield prediction available.',
        'baseYield': 'Base Yield:',
        'predictedImprovement': 'Predicted Improvement',
        'contributingFactors': 'Contributing Factors:',
        'soilHealth': 'Soil Health',
        'fertilization': 'Fertilization',
        'noSchedule': 'No application schedule available.',
        'fertilizerName': 'Fertilizer',
        'applicationMethod': 'Method',
        'noCost': 'No cost breakdown available.',
        'totalCostLabel': 'Total Fertilizer Cost:',
        'costPerHectare': 'Cost per hectare:',
        'unitCost': 'Unit Cost',
        'totalCost': 'Total Cost',
        'noTips': 'No educational tips available.',
        'fetchWeather': 'Please fetch weather data first.',
        'nutrientRequirements': 'Nutrient Requirements',
        'growthStages': 'Growth Stages'
    },
    'hi': {
        'title': 'à¤¸à¥à¤®à¤¾à¤°à¥à¤ à¤à¤°à¥à¤µà¤°à¤ à¤à¤¨à¥à¤¶à¤à¤¸à¤¾ à¤ªà¥à¤°à¤£à¤¾à¤²à¥',
        'selectLanguage': 'à¤­à¤¾à¤·à¤¾ à¤à¥à¤¨à¥à¤:',
        'inputDetails': 'à¤à¤¨à¤ªà¥à¤ à¤µà¤¿à¤µà¤°à¤£',
        'cropType': 'à¤«à¤¸à¤² à¤ªà¥à¤°à¤à¤¾à¤°:',
        'selectCrop': 'à¤«à¤¸à¤² à¤à¥à¤¨à¥à¤',
        'soilType': 'à¤®à¤¿à¤à¥à¤à¥ à¤à¤¾ à¤ªà¥à¤°à¤à¤¾à¤°:',
        'selectSoil': 'à¤®à¤¿à¤à¥à¤à¥ à¤à¤¾ à¤ªà¥à¤°à¤à¤¾à¤° à¤à¥à¤¨à¥à¤',
        'region': 'à¤à¥à¤·à¥à¤¤à¥à¤°:',
        'selectRegion': 'à¤à¥à¤·à¥à¤¤à¥à¤° à¤à¥à¤¨à¥à¤',
        'location': 'à¤¸à¥à¤¥à¤¾à¤¨ (à¤®à¥à¤¸à¤® à¤à¥ à¤²à¤¿à¤):',
        'getWeather': 'à¤®à¥à¤¸à¤® à¤ªà¥à¤°à¤¾à¤ªà¥à¤¤ à¤à¤°à¥à¤',
        'soilTestResults': 'à¤®à¤¿à¤à¥à¤à¥ à¤ªà¤°à¥à¤à¥à¤·à¤£ à¤ªà¤°à¤¿à¤£à¤¾à¤®',
        'soilPH': 'à¤®à¤¿à¤à¥à¤à¥ à¤à¤¾ à¤ªà¥à¤à¤:',
        'nitrogenLevel': 'à¤¨à¤¾à¤à¤à¥à¤°à¥à¤à¤¨ à¤¸à¥à¤¤à¤° (à¤à¤¿à¤à¥à¤°à¤¾/à¤¹à¥à¤à¥à¤à¥à¤¯à¤°):',
        'phosphorusLevel': 'à¤«à¤¾à¤¸à¥à¤«à¥à¤°à¤¸ à¤¸à¥à¤¤à¤° (à¤à¤¿à¤à¥à¤°à¤¾/à¤¹à¥à¤à¥à¤à¥à¤¯à¤°):',
        'potassiumLevel': 'à¤ªà¥à¤à¥à¤¶à¤¿à¤¯à¤® à¤¸à¥à¤¤à¤° (à¤à¤¿à¤à¥à¤°à¤¾/à¤¹à¥à¤à¥à¤à¥à¤¯à¤°):',
        'organicMatter': 'à¤à¥à¤µà¤¿à¤ à¤ªà¤¦à¤¾à¤°à¥à¤¥ (%):',
        'getRecommendation': 'à¤à¤°à¥à¤µà¤°à¤ à¤à¤¨à¥à¤¶à¤à¤¸à¤¾ à¤ªà¥à¤°à¤¾à¤ªà¥à¤¤ à¤à¤°à¥à¤',
        'resetForm': 'à¤«à¥à¤°à¥à¤® à¤°à¥à¤¸à¥à¤ à¤à¤°à¥à¤',
        'recommendation': 'à¤à¤¨à¥à¤¶à¤à¤¸à¤¾',
        'schedule': 'à¤à¤¨à¥à¤ªà¥à¤°à¤¯à¥à¤ à¤à¤¨à¥à¤¸à¥à¤à¥',
        'cost': 'à¤²à¤¾à¤à¤¤ à¤µà¤¿à¤¶à¥à¤²à¥à¤·à¤£',
        'education': 'à¤¶à¤¿à¤à¥à¤·à¤¾',
        'cropInformation': 'à¤«à¤¸à¤² à¤à¤¾à¤¨à¤à¤¾à¤°à¥',
        'weatherConditions': 'à¤®à¥à¤¸à¤® à¤à¥ à¤¸à¥à¤¥à¤¿à¤¤à¤¿',
        'fertilizerRecommendation': 'à¤à¤°à¥à¤µà¤°à¤ à¤à¤¨à¥à¤¶à¤à¤¸à¤¾',
        'yieldPrediction': 'à¤à¤ªà¤ à¤­à¤µà¤¿à¤·à¥à¤¯à¤µà¤¾à¤£à¥',
        'applicationSchedule': 'à¤à¤¨à¥à¤ªà¥à¤°à¤¯à¥à¤ à¤à¤¨à¥à¤¸à¥à¤à¥',
        'costBreakdown': 'à¤²à¤¾à¤à¤¤ à¤µà¤¿à¤¶à¥à¤²à¥à¤·à¤£',
        'educationalTips': 'à¤¶à¥à¤à¥à¤·à¤¿à¤ à¤à¤¿à¤ªà¥à¤¸',
        'footer': 'Â© 2023 à¤¸à¥à¤®à¤¾à¤°à¥à¤ à¤à¤°à¥à¤µà¤°à¤ à¤à¤¨à¥à¤¶à¤à¤¸à¤¾ à¤ªà¥à¤°à¤£à¤¾à¤²à¥ | à¤à¤¿à¤à¤¾à¤ à¤à¥à¤·à¤¿ à¤à¥ à¤²à¤¿à¤ à¤µà¤¿à¤à¤¸à¤¿à¤¤',
        'selectCropFirst': 'à¤à¥à¤ªà¤¯à¤¾ à¤ªà¤¹à¤²à¥ à¤«à¤¸à¤² à¤à¥à¤¨à¥à¤à¥¤',
        'enterLocation': 'à¤à¥à¤ªà¤¯à¤¾ à¤¸à¥à¤¥à¤¾à¤¨ à¤¦à¤°à¥à¤ à¤à¤°à¥à¤à¥¤',
        'fetchingWeather': 'à¤®à¥à¤¸à¤® à¤¡à¥à¤à¤¾ à¤ªà¥à¤°à¤¾à¤ªà¥à¤¤ à¤à¤° à¤°à¤¹à¥ à¤¹à¥à¤...',
        'weatherError': 'à¤®à¥à¤¸à¤® à¤¡à¥à¤à¤¾ à¤ªà¥à¤°à¤¾à¤ªà¥à¤¤ à¤à¤°à¤¨à¥ à¤®à¥à¤ à¤¤à¥à¤°à¥à¤à¤¿à¥¤ à¤à¥à¤ªà¤¯à¤¾ à¤ªà¥à¤¨: à¤ªà¥à¤°à¤¯à¤¾à¤¸ à¤à¤°à¥à¤à¥¤',
        'weatherRecommendations': 'à¤®à¥à¤¸à¤®-à¤à¤§à¤¾à¤°à¤¿à¤¤ à¤à¤¨à¥à¤¶à¤à¤¸à¤¾à¤à¤:',
        'fillAllFields': 'à¤à¥à¤ªà¤¯à¤¾ à¤¸à¤­à¥ à¤à¤µà¤¶à¥à¤¯à¤ à¤«à¤¼à¥à¤²à¥à¤¡ à¤­à¤°à¥à¤à¥¤',
        'noRecommendation': 'à¤à¥à¤ à¤à¤¨à¥à¤¶à¤à¤¸à¤¾ à¤à¤ªà¤²à¤¬à¥à¤§ à¤¨à¤¹à¥à¤ à¤¹à¥à¥¤',
        'quantity': 'à¤®à¤¾à¤¤à¥à¤°à¤¾:',
        'composition': 'à¤¸à¤à¤°à¤à¤¨à¤¾:',
        'description': 'à¤µà¤¿à¤µà¤°à¤£:',
        'noPrediction': 'à¤à¥à¤ à¤à¤ªà¤ à¤­à¤µà¤¿à¤·à¥à¤¯à¤µà¤¾à¤£à¥ à¤à¤ªà¤²à¤¬à¥à¤§ à¤¨à¤¹à¥à¤ à¤¹à¥à¥¤',
        'baseYield': 'à¤à¤§à¤¾à¤° à¤à¤ªà¤:',
        'predictedImprovement': 'à¤à¤¨à¥à¤®à¤¾à¤¨à¤¿à¤¤ à¤¸à¥à¤§à¤¾à¤°',
        'contributingFactors': 'à¤¯à¥à¤à¤¦à¤¾à¤¨ à¤à¤¾à¤°à¤:',
        'soilHealth': 'à¤®à¤¿à¤à¥à¤à¥ à¤à¤¾ à¤¸à¥à¤µà¤¾à¤¸à¥à¤¥à¥à¤¯',
        'fertilization': 'à¤à¤°à¥à¤µà¤°à¤',
        'noSchedule': 'à¤à¥à¤ à¤à¤¨à¥à¤ªà¥à¤°à¤¯à¥à¤ à¤à¤¨à¥à¤¸à¥à¤à¥ à¤à¤ªà¤²à¤¬à¥à¤§ à¤¨à¤¹à¥à¤ à¤¹à¥à¥¤',
        'fertilizerName': 'à¤à¤°à¥à¤µà¤°à¤',
        'applicationMethod': 'à¤µà¤¿à¤§à¤¿',
        'noCost': 'à¤à¥à¤ à¤²à¤¾à¤à¤¤ à¤µà¤¿à¤¶à¥à¤²à¥à¤·à¤£ à¤à¤ªà¤²à¤¬à¥à¤§ à¤¨à¤¹à¥à¤ à¤¹à¥à¥¤',
        'totalCostLabel': 'à¤à¥à¤² à¤à¤°à¥à¤µà¤°à¤ à¤²à¤¾à¤à¤¤:',
        'costPerHectare': 'à¤ªà¥à¤°à¤¤à¤¿ à¤¹à¥à¤à¥à¤à¥à¤¯à¤° à¤²à¤¾à¤à¤¤:',
        'unitCost': 'à¤à¤à¤¾à¤ à¤²à¤¾à¤à¤¤',
        'totalCost': 'à¤à¥à¤² à¤²à¤¾à¤à¤¤',
        'noTips': 'à¤à¥à¤ à¤¶à¥à¤à¥à¤·à¤¿à¤ à¤à¤¿à¤ªà¥à¤¸ à¤à¤ªà¤²à¤¬à¥à¤§ à¤¨à¤¹à¥à¤ à¤¹à¥à¤à¥¤',
        'fetchWeather': 'à¤à¥à¤ªà¤¯à¤¾ à¤ªà¤¹à¤²à¥ à¤®à¥à¤¸à¤® à¤¡à¥à¤à¤¾ à¤ªà¥à¤°à¤¾à¤ªà¥à¤¤ à¤à¤°à¥à¤à¥¤',
        'nutrientRequirements': 'à¤ªà¥à¤·à¤ à¤¤à¤¤à¥à¤µ à¤à¤µà¤¶à¥à¤¯à¤à¤¤à¤¾à¤à¤',
        'growthStages': 'à¤µà¤¿à¤à¤¾à¤¸ à¤à¥ à¤à¤°à¤£'
    },
    'kn': {
        'title': 'à²¸à³à²®à²¾à²°à³à²à³ à²°à²¸à²à³à²¬à³à²¬à²° à²¶à²¿à²«à²¾à²°à²¸à³ à²µà³à²¯à²µà²¸à³à²¥à³',
        'selectLanguage': 'à²­à²¾à²·à³à²¯à²¨à³à²¨à³ à²à²¯à³à²à³à²®à²¾à²¡à²¿:',
        'inputDetails': 'à²à²¨à³âà²ªà³à²à³ à²µà²¿à²µà²°à²à²³à³',
        'cropType': 'à²¬à³à²³à³ à²ªà³à²°à²à²¾à²°:',
        'selectCrop': 'à²¬à³à²³à³à²¯à²¨à³à²¨à³ à²à²¯à³à²à³à²®à²¾à²¡à²¿',
        'soilType': 'à²®à²£à³à²£à²¿à²¨ à²ªà³à²°à²à²¾à²°:',
        'selectSoil': 'à²®à²£à³à²£à²¿à²¨ à²ªà³à²°à²à²¾à²°à²µà²¨à³à²¨à³ à²à²¯à³à²à³à²®à²¾à²¡à²¿',
        'region': 'à²ªà³à²°à²¦à³à²¶:',
        'selectRegion': 'à²ªà³à²°à²¦à³à²¶à²µà²¨à³à²¨à³ à²à²¯à³à²à³à²®à²¾à²¡à²¿',
        'location': 'à²¸à³à²¥à²³ (à²¹à²µà²¾à²®à²¾à²¨à²à³à²à²¾à²à²¿):',
        'getWeather': 'à²¹à²µà²¾à²®à²¾à²¨ à²ªà²¡à³à²¯à²¿à²°à²¿',
        'soilTestResults': 'à²®à²£à³à²£à³ à²ªà²°à³à²à³à²·à³ à²«à²²à²¿à²¤à²¾à²à²¶à²à²³à³',
        'soilPH': 'à²®à²£à³à²£à²¿à²¨ pH:',
        'nitrogenLevel': 'à²¨à³à²à³à²°à³à²à²¨à³ à²®à²à³à² (à²à³à²à²¿/à²¹à³à²à³à²à³à²°à³):',
        'phosphorusLevel': 'à²«à²¾à²¸à³à²«à²°à²¸à³ à²®à²à³à² (à²à³à²à²¿/à²¹à³à²à³à²à³à²°à³):',
        'potassiumLevel': 'à²ªà³à²à³à²¯à²¾à²¸à²¿à²¯à² à²®à²à³à² (à²à³à²à²¿/à²¹à³à²à³à²à³à²°à³):',
        'organicMatter': 'à²¸à²¾à²µà²¯à²µ à²µà²¸à³à²¤à³ (%):',
        'getRecommendation': 'à²°à²¸à²à³à²¬à³à²¬à²° à²¶à²¿à²«à²¾à²°à²¸à³ à²ªà²¡à³à²¯à²¿à²°à²¿',
        'resetForm': 'à²«à²¾à²°à³à²®à³ à²®à²°à³à²¹à³à²à²¦à²¿à²¸à²¿',
        'recommendation': 'à²¶à²¿à²«à²¾à²°à²¸à³',
        'schedule': 'à²à²ªà³à²²à²¿à²à³à²¶à²¨à³ à²µà³à²³à²¾à²ªà²à³à²à²¿',
        'cost': 'à²µà³à²à³à² à²µà²¿à²¶à³à²²à³à²·à²£à³',
        'education': 'à²¶à²¿à²à³à²·à²£',
        'cropInformation': 'à²¬à³à²³à³ à²®à²¾à²¹à²¿à²¤à²¿',
        'weatherConditions': 'à²¹à²µà²¾à²®à²¾à²¨ à²ªà²°à²¿à²¸à³à²¥à²¿à²¤à²¿à²à²³à³',
        'fertilizerRecommendation': 'à²°à²¸à²à³à²¬à³à²¬à²° à²¶à²¿à²«à²¾à²°à²¸à³',
        'yieldPrediction': 'à²à²³à³à²µà²°à²¿ à²®à³à²¨à³à²¸à³à²à²¨à³',
        'applicationSchedule': 'à²à²ªà³à²²à²¿à²à³à²¶à²¨à³ à²µà³à²³à²¾à²ªà²à³à²à²¿',
        'costBreakdown': 'à²µà³à²à³à² à²µà²¿à²¶à³à²²à³à²·à²£à³',
        'educationalTips': 'à²¶à³à²à³à²·à²£à²¿à² à²¸à²²à²¹à³à²à²³à³',
        'footer': 'Â© 2023 à²¸à³à²®à²¾à²°à³à²à³ à²°à²¸à²à³à²¬à³à²¬à²° à²¶à²¿à²«à²¾à²°à²¸à³ à²µà³à²¯à²µà²¸à³à²¥à³ | à²¸à³à²¸à³à²¥à²¿à²° à²à³à²·à²¿à²à²¾à²à²¿ à²à²­à²¿à²µà³à²¦à³à²§à²¿à²ªà²¡à²¿à²¸à²²à²¾à²à²¿à²¦à³',
        'selectCropFirst': 'à²¦à²¯à²µà²¿à²à³à²à³ à²®à³à²¦à²²à³ à²¬à³à²³à³à²¯à²¨à³à²¨à³ à²à²¯à³à²à³à²®à²¾à²¡à²¿.',
        'enterLocation': 'à²¦à²¯à²µà²¿à²à³à²à³ à²¸à³à²¥à²³à²µà²¨à³à²¨à³ à²¨à²®à³à²¦à²¿à²¸à²¿.',
        'fetchingWeather': 'à²¹à²µà²¾à²®à²¾à²¨ à²¡à³à²à²¾à²µà²¨à³à²¨à³ à²ªà²¡à³à²¯à²²à²¾à²à³à²¤à³à²¤à²¿à²¦à³...',
        'weatherError': 'à²¹à²µà²¾à²®à²¾à²¨ à²¡à³à²à²¾à²µà²¨à³à²¨à³ à²ªà²¡à³à²¯à³à²µà²²à³à²²à²¿ à²¦à³à²·. à²¦à²¯à²µà²¿à²à³à²à³ à²®à²¤à³à²¤à³ à²ªà³à²°à²¯à²¤à³à²¨à²¿à²¸à²¿.',
        'weatherRecommendations': 'à²¹à²µà²¾à²®à²¾à²¨-à²à²§à²¾à²°à²¿à²¤ à²¶à²¿à²«à²¾à²°à²¸à³à²à²³à³:',
        'fillAllFields': 'à²¦à²¯à²µà²¿à²à³à²à³ à²à²²à³à²²à²¾ à²à²à²¤à³à²¯ à²à³à²·à³à²¤à³à²°à²à²³à²¨à³à²¨à³ à²­à²°à³à²¤à²¿ à²®à²¾à²¡à²¿.',
        'noRecommendation': 'à²¯à²¾à²µà³à²¦à³ à²¶à²¿à²«à²¾à²°à²¸à³ à²²à²­à³à²¯à²µà²¿à²²à³à²².',
        'quantity': 'à²ªà³à²°à²®à²¾à²£:',
        'composition': 'à²¸à²à²¯à³à²à²¨à³:',
        'description': 'à²µà²¿à²µà²°à²£à³:',
        'noPrediction': 'à²¯à²¾à²µà³à²¦à³ à²à²³à³à²µà²°à²¿ à²®à³à²¨à³à²¸à³à²à²¨à³ à²²à²­à³à²¯à²µà²¿à²²à³à²².',
        'baseYield': 'à²®à³à²² à²à²³à³à²µà²°à²¿:',
        'predictedImprovement': 'à²à²¹à²¿à²¸à²¿à²¦ à²¸à³à²§à²¾à²°à²£à³',
        'contributingFactors': 'à²à³à²¡à³à²à³ à²¨à³à²¡à³à²µ à²à²à²¶à²à²³à³:',
        'soilHealth': 'à²®à²£à³à²£à²¿à²¨ à²à²°à³à²à³à²¯',
        'fertilization': 'à²°à²¸à²à³à²¬à³à²¬à²°',
        'noSchedule': 'à²¯à²¾à²µà³à²¦à³ à²à²ªà³à²²à²¿à²à³à²¶à²¨à³ à²µà³à²³à²¾à²ªà²à³à²à²¿ à²²à²­à³à²¯à²µà²¿à²²à³à²².',
        'fertilizerName': 'à²°à²¸à²à³à²¬à³à²¬à²°',
        'applicationMethod': 'à²µà²¿à²§à²¾à²¨',
        'noCost': 'à²¯à²¾à²µà³à²¦à³ à²µà³à²à³à² à²µà²¿à²¶à³à²²à³à²·à²£à³ à²²à²­à³à²¯à²µà²¿à²²à³à²².',
        'totalCostLabel': 'à²à²à³à²à³ à²°à²¸à²à³à²¬à³à²¬à²° à²µà³à²à³à²:',
        'costPerHectare': 'à²ªà³à²°à²¤à²¿ à²¹à³à²à³à²à³à²°à³âà²à³ à²µà³à²à³à²:',
        'unitCost': 'à²à²à² à²µà³à²à³à²',
        'totalCost': 'à²à²à³à²à³ à²µà³à²à³à²',
        'noTips': 'à²¯à²¾à²µà³à²¦à³ à²¶à³à²à³à²·à²£à²¿à² à²¸à²²à²¹à³à²à²³à³ à²²à²­à³à²¯à²µà²¿à²²à³à²².',
        'fetchWeather': 'à²¦à²¯à²µà²¿à²à³à²à³ à²®à³à²¦à²²à³ à²¹à²µà²¾à²®à²¾à²¨ à²¡à³à²à²¾à²µà²¨à³à²¨à³ à²ªà²¡à³à²¯à²¿à²°à²¿.',
        'nutrientRequirements': 'à²ªà³à²·à²à²¾à²à²¶ à²à²µà²¶à³à²¯à²à²¤à³à²à²³à³',
        'growthStages': 'à²¬à³à²³à²µà²£à²¿à²à³ à²¹à²à²¤à²à²³à³'
    },
    'te': {
        'title': 'à°¸à±à°®à°¾à°°à±à°à± à°à°°à±à°µà±à°² à°¸à°¿à°«à°¾à°°à±à°¸à± à°µà±à°¯à°µà°¸à±à°¥',
        'selectLanguage': 'à°­à°¾à°· à°à°à°à±à°à±à°à°¡à°¿:',
        'inputDetails': 'à°à°¨à±âà°ªà±à°à± à°µà°¿à°µà°°à°¾à°²à±',
        'cropType': 'à°ªà°à° à°°à°à°:',
        'selectCrop': 'à°ªà°à°à°¨à± à°à°à°à±à°à±à°à°¡à°¿',
        'soilType': 'à°¨à±à°² à°°à°à°:',
        'selectSoil': 'à°¨à±à°² à°°à°à°¾à°¨à±à°¨à°¿ à°à°à°à±à°à±à°à°¡à°¿',
        'region': 'à°ªà±à°°à°¾à°à°¤à°:',
        'selectRegion': 'à°ªà±à°°à°¾à°à°¤à°¾à°¨à±à°¨à°¿ à°à°à°à±à°à±à°à°¡à°¿',
        'location': 'à°¸à±à°¥à°¾à°¨à° (à°µà°¾à°¤à°¾à°µà°°à°£à° à°à±à°¸à°):',
        'getWeather': 'à°µà°¾à°¤à°¾à°µà°°à°£à°¾à°¨à±à°¨à°¿ à°ªà±à°à°¦à°à°¡à°¿',
        'soilTestResults': 'à°¨à±à°² à°ªà°°à±à°à±à°· à°«à°²à°¿à°¤à°¾à°²à±',
        'soilPH': 'à°¨à±à°² pH:',
        'nitrogenLevel': 'à°¨à°¤à±à°°à°à°¨à°¿ à°¸à±à°¥à°¾à°¯à°¿ (à°à±à°à±/à°¹à±à°à±à°à°¾à°°à±):',
        'phosphorusLevel': 'à°«à°¾à°¸à±à°ªà°°à°¸à± à°¸à±à°¥à°¾à°¯à°¿ (à°à±à°à±/à°¹à±à°à±à°à°¾à°°à±):',
        'potassiumLevel': 'à°ªà±à°à°¾à°·à°¿à°¯à° à°¸à±à°¥à°¾à°¯à°¿ (à°à±à°à±/à°¹à±à°à±à°à°¾à°°à±):',
        'organicMatter': 'à°¸à±à°à°¦à±à°°à°¿à°¯ à°ªà°¦à°¾à°°à±à°¥à° (%):',
        'getRecommendation': 'à°à°°à±à°µà±à°² à°¸à°¿à°«à°¾à°°à±à°¸à±à°¨à± à°ªà±à°à°¦à°à°¡à°¿',
        'resetForm': 'à°«à°¾à°°à°®à±âà°¨à± à°°à±à°¸à±à°à± à°à±à°¯à°à°¡à°¿',
        'recommendation': 'à°¸à°¿à°«à°¾à°°à±à°¸à±',
        'schedule': 'à°à°ªà±à°²à°¿à°à±à°·à°¨à± à°·à±à°¡à±à°¯à±à°²à±',
        'cost': 'à°à°°à±à°à± à°µà°¿à°¶à±à°²à±à°·à°£',
        'education': 'à°µà°¿à°¦à±à°¯',
        'cropInformation': 'à°ªà°à° à°¸à°®à°¾à°à°¾à°°à°',
        'weatherConditions': 'à°µà°¾à°¤à°¾à°µà°°à°£ à°ªà°°à°¿à°¸à±à°¥à°¿à°¤à±à°²à±',
        'fertilizerRecommendation': 'à°à°°à±à°µà±à°² à°¸à°¿à°«à°¾à°°à±à°¸à±',
        'yieldPrediction': 'à°¦à°¿à°à±à°¬à°¡à°¿ à°à°à°à°¨à°¾',
        'applicationSchedule': 'à°à°ªà±à°²à°¿à°à±à°·à°¨à± à°·à±à°¡à±à°¯à±à°²à±',
        'costBreakdown': 'à°à°°à±à°à± à°µà°¿à°¶à±à°²à±à°·à°£',
        'educationalTips': 'à°µà°¿à°¦à±à°¯à°¾ à°à°¿à°à±à°à°¾à°²à±',
        'footer': 'Â© 2023 à°¸à±à°®à°¾à°°à±à°à± à°à°°à±à°µà±à°² à°¸à°¿à°«à°¾à°°à±à°¸à± à°µà±à°¯à°µà°¸à±à°¥ | à°¸à±à°¸à±à°¥à°¿à°° à°µà±à°¯à°µà°¸à°¾à°¯à° à°à±à°¸à° à°à°­à°¿à°µà±à°¦à±à°§à°¿ à°à±à°¯à°¬à°¡à°¿à°à°¦à°¿',
        'selectCropFirst': 'à°¦à°¯à°à±à°¸à°¿ à°®à±à°à°¦à±à°à°¾ à°ªà°à°à°¨à± à°à°à°à±à°à±à°à°¡à°¿.',
        'enterLocation': 'à°¦à°¯à°à±à°¸à°¿ à°¸à±à°¥à°¾à°¨à°¾à°¨à±à°¨à°¿ à°¨à°®à±à°¦à± à°à±à°¯à°à°¡à°¿.',
        'fetchingWeather': 'à°µà°¾à°¤à°¾à°µà°°à°£ à°¡à±à°à°¾à°¨à± à°ªà±à°à°¦à±à°¤à±à°à°¦à°¿...',
        'weatherError': 'à°µà°¾à°¤à°¾à°µà°°à°£ à°¡à±à°à°¾à°¨à± à°ªà±à°à°¦à°¡à°à°²à± à°²à±à°ªà°. à°¦à°¯à°à±à°¸à°¿ à°®à°³à±à°²à± à°ªà±à°°à°¯à°¤à±à°¨à°¿à°à°à°à°¡à°¿.',
        'weatherRecommendations': 'à°µà°¾à°¤à°¾à°µà°°à°£-à°à°§à°¾à°°à°¿à°¤ à°¸à°¿à°«à°¾à°°à±à°¸à±à°²à±:',
        'fillAllFields': 'à°¦à°¯à°à±à°¸à°¿ à°à°¨à±à°¨à°¿ à°à°µà°¸à°°à°®à±à°¨ à°«à±à°²à±à°¡à±âà°²à°¨à± à°ªà±à°°à°¿à°à°à°à°¡à°¿.',
        'noRecommendation': 'à°¸à°¿à°«à°¾à°°à±à°¸à± à°à°à°¦à±à°¬à°¾à°à±à°²à± à°²à±à°¦à±.',
        'quantity': 'à°ªà°°à°¿à°®à°¾à°£à°:',
        'composition': 'à°à±à°°à±à°ªà±:',
        'description': 'à°µà°¿à°µà°°à°£:',
        'noPrediction': 'à°¦à°¿à°à±à°¬à°¡à°¿ à°à°à°à°¨à°¾ à°à°à°¦à±à°¬à°¾à°à±à°²à± à°²à±à°¦à±.',
        'baseYield': 'à°ªà±à°°à°¾à°¥à°®à°¿à° à°¦à°¿à°à±à°¬à°¡à°¿:',
        'predictedImprovement': 'à°à°à°à°¨à°¾ à°µà±à°¸à°¿à°¨ à°®à±à°°à±à°à±à°¦à°²',
        'contributingFactors': 'à°¦à±à°¹à°¦à°ªà°¡à± à°à°¾à°°à°à°¾à°²à±:',
        'soilHealth': 'à°¨à±à°² à°à°°à±à°à±à°¯à°',
        'fertilization': 'à°à°°à±à°µà±',
        'noSchedule': 'à°à°ªà±à°²à°¿à°à±à°·à°¨à± à°·à±à°¡à±à°¯à±à°²à± à°à°à°¦à±à°¬à°¾à°à±à°²à± à°²à±à°¦à±.',
        'fertilizerName': 'à°à°°à±à°µà±',
        'applicationMethod': 'à°ªà°¦à±à°§à°¤à°¿',
        'noCost': 'à°à°°à±à°à± à°µà°¿à°¶à±à°²à±à°·à°£ à°à°à°¦à±à°¬à°¾à°à±à°²à± à°²à±à°¦à±.',
        'totalCostLabel': 'à°®à±à°¤à±à°¤à° à°à°°à±à°µà± à°à°°à±à°à±:',
        'costPerHectare': 'à°¹à±à°à±à°à°¾à°°à±à°à± à°à°°à±à°à±:',
        'unitCost': 'à°¯à±à°¨à°¿à°à± à°à°°à±à°à±',
        'totalCost': 'à°®à±à°¤à±à°¤à° à°à°°à±à°à±',
        'noTips': 'à°µà°¿à°¦à±à°¯à°¾ à°à°¿à°à±à°à°¾à°²à± à°à°à°¦à±à°¬à°¾à°à±à°²à± à°²à±à°µà±.',
        'fetchWeather': 'à°¦à°¯à°à±à°¸à°¿ à°®à±à°à°¦à±à°à°¾ à°µà°¾à°¤à°¾à°µà°°à°£ à°¡à±à°à°¾à°¨à± à°ªà±à°à°¦à°à°¡à°¿.',
        'nutrientRequirements': 'à°ªà±à°·à°à°¾à°² à°à°µà°¸à°°à°¾à°²à±',
        'growthStages': 'à°µà±à°¦à±à°§à°¿ à°¦à°¶à°²à±'
    },
    'ta': {
        'title': 'à®¸à¯à®®à®¾à®°à¯à®à¯ à®à®° à®ªà®°à®¿à®¨à¯à®¤à¯à®°à¯ à®à®®à¯à®ªà¯à®ªà¯',
        'selectLanguage': 'à®®à¯à®´à®¿à®¯à¯à®¤à¯ à®¤à¯à®°à¯à®¨à¯à®¤à¯à®à¯à®à¯à®à®µà¯à®®à¯:',
        'inputDetails': 'à®à®³à¯à®³à¯à®à¯à®à¯ à®µà®¿à®µà®°à®à¯à®à®³à¯',
        'cropType': 'à®ªà®¯à®¿à®°à¯ à®µà®à¯:',
        'selectCrop': 'à®ªà®¯à®¿à®°à¯à®¤à¯ à®¤à¯à®°à¯à®¨à¯à®¤à¯à®à¯à®à¯à®à®µà¯à®®à¯',
        'soilType': 'à®®à®£à¯ à®µà®à¯:',
        'selectSoil': 'à®®à®£à¯ à®µà®à¯à®¯à¯à®¤à¯ à®¤à¯à®°à¯à®¨à¯à®¤à¯à®à¯à®à¯à®à®µà¯à®®à¯',
        'region': 'à®ªà®à¯à®¤à®¿:',
        'selectRegion': 'à®ªà®à¯à®¤à®¿à®¯à¯à®¤à¯ à®¤à¯à®°à¯à®¨à¯à®¤à¯à®à¯à®à¯à®à®µà¯à®®à¯',
        'location': 'à®à®à®®à¯ (à®µà®¾à®©à®¿à®²à¯à®à¯à®à®¾à®):',
        'getWeather': 'à®µà®¾à®©à®¿à®²à¯à®¯à¯à®ªà¯ à®ªà¯à®±à¯à®',
        'soilTestResults': 'à®®à®£à¯ à®ªà®°à®¿à®à¯à®¤à®©à¯ à®®à¯à®à®¿à®µà¯à®à®³à¯',
        'soilPH': 'à®®à®£à¯ pH:',
        'nitrogenLevel': 'à®¨à¯à®à¯à®°à®à®©à¯ à®à®³à®µà¯ (à®à®¿à®²à¯/à®¹à¯à®à¯à®à¯à®°à¯):',
        'phosphorusLevel': 'à®ªà®¾à®¸à¯à®ªà®°à®¸à¯ à®à®³à®µà¯ (à®à®¿à®²à¯/à®¹à¯à®à¯à®à¯à®°à¯):',
        'potassiumLevel': 'à®ªà¯à®à¯à®à®¾à®à®¿à®¯à®®à¯ à®à®³à®µà¯ (à®à®¿à®²à¯/à®¹à¯à®à¯à®à¯à®°à¯):',
        'organicMatter': 'à®à®°à®¿à®® à®ªà¯à®°à¯à®³à¯ (%):',
        'getRecommendation': 'à®à®° à®ªà®°à®¿à®¨à¯à®¤à¯à®°à¯à®¯à¯à®ªà¯ à®ªà¯à®±à¯à®',
        'resetForm': 'à®ªà®à®¿à®µà®¤à¯à®¤à¯ à®®à¯à®à¯à®à®®à¯à®à¯à®à®µà¯à®®à¯',
        'recommendation': 'à®ªà®°à®¿à®¨à¯à®¤à¯à®°à¯',
        'schedule': 'à®ªà®¯à®©à¯à®ªà®¾à®à¯à®à¯ à®à®à¯à®à®µà®£à¯',
        'cost': 'à®à¯à®²à®µà¯ à®ªà®à¯à®ªà¯à®ªà®¾à®¯à¯à®µà¯',
        'education': 'à®à®²à¯à®µà®¿',
        'cropInformation': 'à®ªà®¯à®¿à®°à¯ à®¤à®à®µà®²à¯',
        'weatherConditions': 'à®µà®¾à®©à®¿à®²à¯ à®¨à®¿à®²à¯à®®à¯à®à®³à¯',
        'fertilizerRecommendation': 'à®à®° à®ªà®°à®¿à®¨à¯à®¤à¯à®°à¯',
        'yieldPrediction': 'à®µà®¿à®³à¯à®à¯à®à®²à¯ à®à®£à®¿à®ªà¯à®ªà¯',
        'applicationSchedule': 'à®ªà®¯à®©à¯à®ªà®¾à®à¯à®à¯ à®à®à¯à®à®µà®£à¯',
        'costBreakdown': 'à®à¯à®²à®µà¯ à®ªà®à¯à®ªà¯à®ªà®¾à®¯à¯à®µà¯',
        'educationalTips': 'à®à®²à¯à®µà®¿ à®à¯à®±à®¿à®ªà¯à®ªà¯à®à®³à¯',
        'footer': 'Â© 2023 à®¸à¯à®®à®¾à®°à¯à®à¯ à®à®° à®ªà®°à®¿à®¨à¯à®¤à¯à®°à¯ à®à®®à¯à®ªà¯à®ªà¯ | à®¨à®¿à®²à¯à®¯à®¾à®© à®µà®¿à®µà®à®¾à®¯à®¤à¯à®¤à®¿à®±à¯à®à®¾à® à®à®°à¯à®µà®¾à®à¯à®à®ªà¯à®ªà®à¯à®à®¤à¯',
        'selectCropFirst': 'à®®à¯à®¤à®²à®¿à®²à¯ à®ªà®¯à®¿à®°à¯à®¤à¯ à®¤à¯à®°à¯à®¨à¯à®¤à¯à®à¯à®à¯à®à®µà¯à®®à¯.',
        'enterLocation': 'à®à®à®¤à¯à®¤à¯ à®à®³à¯à®³à®¿à®à®µà¯à®®à¯.',
        'fetchingWeather': 'à®µà®¾à®©à®¿à®²à¯ à®¤à®°à®µà¯à®ªà¯ à®ªà¯à®±à¯à®à®¿à®±à®¤à¯...',
        'weatherError': 'à®µà®¾à®©à®¿à®²à¯ à®¤à®°à®µà¯à®ªà¯ à®ªà¯à®±à¯à®µà®¤à®¿à®²à¯ à®ªà®¿à®´à¯. à®®à¯à®£à¯à®à¯à®®à¯ à®®à¯à®¯à®±à¯à®à®¿à®à¯à®à®µà¯à®®à¯.',
        'weatherRecommendations': 'à®µà®¾à®©à®¿à®²à¯ à®à®à®¿à®ªà¯à®ªà®à¯à®¯à®¿à®²à®¾à®© à®ªà®°à®¿à®¨à¯à®¤à¯à®°à¯à®à®³à¯:',
        'fillAllFields': 'à®à®©à¯à®¤à¯à®¤à¯ à®¤à¯à®µà¯à®¯à®¾à®© à®ªà¯à®²à®à¯à®à®³à¯à®¯à¯à®®à¯ à®¨à®¿à®°à®ªà¯à®ªà®µà¯à®®à¯.',
        'noRecommendation': 'à®ªà®°à®¿à®¨à¯à®¤à¯à®°à¯ à®à®¤à¯à®µà¯à®®à¯ à®à®²à¯à®²à¯.',
        'quantity': 'à®à®³à®µà¯:',
        'composition': 'à®à®²à®µà¯:',
        'description': 'à®µà®¿à®³à®à¯à®à®®à¯:',
        'noPrediction': 'à®µà®¿à®³à¯à®à¯à®à®²à¯ à®à®£à®¿à®ªà¯à®ªà¯ à®à®¤à¯à®µà¯à®®à¯ à®à®²à¯à®²à¯.',
        'baseYield': 'à®à®à®¿à®ªà¯à®ªà®à¯ à®µà®¿à®³à¯à®à¯à®à®²à¯:',
        'predictedImprovement': 'à®à®£à®¿à®à¯à®à®ªà¯à®ªà®à¯à® à®®à¯à®®à¯à®ªà®¾à®à¯',
        'contributingFactors': 'à®ªà®à¯à®à®³à®¿à®à¯à®à¯à®®à¯ à®à®¾à®°à®£à®¿à®à®³à¯:',
        'soilHealth': 'à®®à®£à¯ à®à®°à¯à®à¯à®à®¿à®¯à®®à¯',
        'fertilization': 'à®à®°à®®à®¿à®à¯à®¤à®²à¯',
        'noSchedule': 'à®ªà®¯à®©à¯à®ªà®¾à®à¯à®à¯ à®à®à¯à®à®µà®£à¯ à®à®¤à¯à®µà¯à®®à¯ à®à®²à¯à®²à¯.',
        'fertilizerName': 'à®à®°à®®à¯',
        'applicationMethod': 'à®®à¯à®±à¯',
        'noCost': 'à®à¯à®²à®µà¯ à®ªà®à¯à®ªà¯à®ªà®¾à®¯à¯à®µà¯ à®à®¤à¯à®µà¯à®®à¯ à®à®²à¯à®²à¯.',
        'totalCostLabel': 'à®®à¯à®¤à¯à®¤ à®à®° à®à¯à®²à®µà¯:',
        'costPerHectare': 'à®¹à¯à®à¯à®à¯à®°à¯à®à¯à®à®¾à®© à®à¯à®²à®µà¯:',
        'unitCost': 'à®à®²à®à¯ à®à¯à®²à®µà¯',
        'totalCost': 'à®®à¯à®¤à¯à®¤ à®à¯à®²à®µà¯',
        'noTips': 'à®à®²à¯à®µà®¿ à®à¯à®±à®¿à®ªà¯à®ªà¯à®à®³à¯ à®à®¤à¯à®µà¯à®®à¯ à®à®²à¯à®²à¯.',
        'fetchWeather': 'à®®à¯à®¤à®²à®¿à®²à¯ à®µà®¾à®©à®¿à®²à¯ à®¤à®°à®µà¯à®ªà¯ à®ªà¯à®±à®µà¯à®®à¯.',
        'nutrientRequirements': 'à®à®à¯à®à®à¯à®à®¤à¯à®¤à¯ à®¤à¯à®µà¯à®à®³à¯',
        'growthStages': 'à®µà®³à®°à¯à®à¯à®à®¿ à®¨à®¿à®²à¯à®à®³à¯'
    }
};

// Initialize the application
document.addEventListener('DOMContentLoaded', () => {
    // Load preferred language from localStorage if available
    const savedLanguage = localStorage.getItem('preferredLanguage');
    if (savedLanguage) {
        languageSelect.value = savedLanguage;
    }
    
    // Translate the page on load
    translatePage();
    
    // Initialize tooltips
    initTooltips();
});
